services:
  postgres-primary:
    image: postgres:16
    container_name: postgres-primary 						# nombre del contenedor
    hostname: postgres-primary							# nombre dentro de la red
    environment:
      POSTGRES_USER: shen 							# nombre de usuario de postgres
      POSTGRES_PASSWORD: sdfsdf 						# contraseña de postgres
      POSTGRES_DB: prueba 							# nombre de la bbdd de postgres inicial
    volumes:
      - ./data/primary:/var/lib/postgresql/data					# volumen persistente de datos
      - ./scripts/init-primary.sh:/docker-entrypoint-initdb.d/init-primary.sh	# script para iniciar
    ports:
      - "5432:5432"								# el puerto expuesto
    networks:
      postgres_network:
        ipv4_address: 172.20.0.2						# ip fija dentro de la red de docker
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shen -d prueba"]			#verifica si el servidor esta listo
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped							# se reinicia el contenedor si se detiene

  postgres-replica1:
    image: postgres:16
    container_name: postgres-replica1
    hostname: postgres-replica1
    depends_on:
      postgres-primary:
        condition: service_healthy						# espera a que el servidor primary este saludable
    environment:
      POSTGRES_USER: shen
      POSTGRES_PASSWORD: sdfsdf
      POSTGRES_DB: prueba
      PRIMARY_HOST: postgres-primary						# host del nodo primario para la replicacion
      PRIMARY_PORT: 5432							# puerto del primary
      REPLICA_NAME: replica1							# nombre de esta replica
    volumes:
      - ./data/replica1:/var/lib/postgresql/data
      - ./scripts/init-replica.sh:/docker-entrypoint-initdb.d/init-replica.sh
    ports:
      - "5433:5432"								# redireccion de puerto
    networks:
      postgres_network:
        ipv4_address: 172.20.0.3
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shen -d prueba"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  postgres-replica2:
    image: postgres:16
    container_name: postgres-replica2
    hostname: postgres-replica2
    depends_on:
      postgres-primary:
        condition: service_healthy
    environment:
      POSTGRES_USER: shen
      POSTGRES_PASSWORD: sdfsdf
      POSTGRES_DB: prueba
      PRIMARY_HOST: postgres-primary
      PRIMARY_PORT: 5432
      REPLICA_NAME: replica2
    volumes:
      - ./data/replica2:/var/lib/postgresql/data
      - ./scripts/init-replica.sh:/docker-entrypoint-initdb.d/init-replica.sh
    ports:
      - "5434:5432"
    networks:
      postgres_network:
        ipv4_address: 172.20.0.4
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shen -d prueba"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  haproxy:
    image: haproxy:latest
    container_name: haproxy
    depends_on:
      postgres-primary:
        condition: service_healthy
      postgres-replica1:
        condition: service_healthy
      postgres-replica2:
        condition: service_healthy
    volumes:
      - ./configs/haproxy:/usr/local/etc/haproxy:ro				 
    ports:
      - "5435:5435"  								# puerto de lectura/escritura
      - "5436:5436"  								# puerto de lectura
      - "8404:8404"  								# interfaz de estadisticas haproxy
    networks:
      postgres_network:
        ipv4_address: 172.20.0.5
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./configs/prometheus:/etc/prometheus					
      - prometheus_data:/prometheus						
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'				# ruta del archivo de configuración principal de prometheus
      - '--storage.tsdb.path=/prometheus'					# ruta de almacenamiento temporal de los datos de serie temporal
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'	# habilitan las consolas web de Prometheus, libreria javascript y css
      - '--web.console.templates=/usr/share/prometheus/consoles'		# plantillas para html para consola web
    ports:
      - 9090:9090
    networks:
      postgres_network:
        ipv4_address: 172.20.0.6
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      postgres_network:
        ipv4_address: 172.20.0.7
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin						# usuario de grafana
      - GF_SECURITY_ADMIN_PASSWORD=admin					# contraseña de grafana
      - GF_USERS_ALLOW_SIGN_UP=false						# desactiva registros de nuevos usuarios

  postgres_exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    container_name: postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://shen:sdfsdf@postgres-primary:5432/prueba?sslmode=disable" # conexion a postgresql desde el exporter
    ports:
      - 9187:9187
    networks:
      postgres_network:
        ipv4_address: 172.20.0.8
    restart: unless-stopped
	
volumes:									# volumenes persistentes para datos de prometheus y grafana
  prometheus_data:
  grafana_data:

networks:									# red docker personalizada con ips estaticas
  postgres_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
